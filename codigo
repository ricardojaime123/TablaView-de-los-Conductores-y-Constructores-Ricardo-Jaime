

package application;

import demo_jdbc.models.ConstructorResult;
import demo_jdbc.respositories.ConstructorResultRepository;
import demo_jdbc.respositories.SeasonRepository;
import demo_jdbc.models.Season;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Main extends Application {

    private ConstructorResultRepository constructorResultRepository = new ConstructorResultRepository();
  â€¦
[21:11, 16/7/2024] jhonny: package demo_jdbc.models;

public class ConstructorResult {
    private String constructorName;
    private int wins;
    private int totalPoints;
    private int rank;

    public ConstructorResult(String constructorName, int wins, int totalPoints, int rank) {
        this.constructorName = constructorName;
        this.wins = wins;
        this.totalPoints = totalPoints;
        this.rank = rank;
    }

    public String getConstructorName() {
        return constructorName;
    }

    public int getWins() {
        return wins;
    }

    public int getTotalPoints() {
        return totalPoints;
    }

    public int getRank() {
        return rank;
    }
}
[21:11, 16/7/2024] jhonny: package demo_jdbc.respositories;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.List;

import demo_jdbc.models.ConstructorResult;

public class ConstructorResultRepository {
    
    String jdbcUrl = "jdbc:postgresql://localhost:5432/tablaview";
    String user = "postgres";
    String password = "johnny12345";

    public List<ConstructorResult> getResultByYear(int year) {
        List<ConstructorResult> results = new ArrayList<>();

        try {
            // Establecer la conexion
            Connection conn = DriverManager.getConnection(jdbcUrl, user, password);
            
            // Ejecutar la consulta
            String sql = "SELECT\n"
                    + "    r.year,\n"
                    + "    c.name,\n"
                    + "    COUNT(CASE WHEN res.position = 1 THEN 1 END) AS wins,\n"
                    + "    SUM(res.points) AS total_points,\n"
                    + "    RANK() OVER (PARTITION BY r.year ORDER BY SUM(res.points) DESC) AS season_rank\n"
                    + "FROM\n"
                    + "    results res\n"
                    + "JOIN\n"
                    + "    races r ON res.race_id = r.race_id\n"
                    + "JOIN\n"
                    + "    constructors c ON res.constructor_id = c.constructor_id\n"
                    + "WHERE r.year = ?\n"
                    + "GROUP BY\n"
                    + "    r.year, c.constructor_id, c.name\n"
                    + "ORDER BY\n"
                    + "    r.year, season_rank;";
            
            // Crear una sentencia
            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setInt(1, year);
            
            ResultSet rs = statement.executeQuery();
            
            // Procesar los resultados
            while(rs.next()) {
                String constructorName = rs.getString("name");
                int wins = rs.getInt("wins");
                int totalPoints = rs.getInt("total_points");
                int seasonRank = rs.getInt("season_rank");

                ConstructorResult result = new ConstructorResult(constructorName, wins, totalPoints, seasonRank);
                results.add(result);
            }
            
        } catch(Exception ex) {
            ex.printStackTrace();
        }

        return results;
    }
}
